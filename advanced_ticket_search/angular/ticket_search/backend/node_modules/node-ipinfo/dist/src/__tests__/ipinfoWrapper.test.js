"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var dotenv = __importStar(require("dotenv"));
var ipinfoWrapper_1 = __importDefault(require("../ipinfoWrapper"));
var ipinfoWrapper;
beforeEach(function () {
    dotenv.config();
    var token = process.env.IPINFO_TOKEN || "";
    ipinfoWrapper = new ipinfoWrapper_1.default(token);
});
describe("IPinfoWrapper", function () {
    test("lookupIp", function (done) { return __awaiter(void 0, void 0, void 0, function () {
        var i, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    i = 0;
                    _a.label = 1;
                case 1:
                    if (!(i < 5)) return [3, 4];
                    return [4, ipinfoWrapper.lookupIp("8.8.8.8")];
                case 2:
                    data = _a.sent();
                    expect(data.ip).toEqual("8.8.8.8");
                    expect(data.hostname).toEqual("dns.google");
                    expect(data.city).toEqual("Mountain View");
                    expect(data.region).toEqual("California");
                    expect(data.country).toEqual("United States");
                    expect(data.isEU).toEqual(false);
                    expect(data.countryCode).toEqual("US");
                    expect(data.countryFlag.emoji).toEqual("ðŸ‡ºðŸ‡¸");
                    expect(data.countryFlag.unicode).toEqual("U+1F1FA U+1F1F8");
                    expect(data.countryCurrency.code).toEqual("USD");
                    expect(data.countryCurrency.symbol).toEqual("$");
                    expect(data.continent.code).toEqual("NA");
                    expect(data.continent.name).toEqual("North America");
                    expect(data.loc).toEqual("37.4056,-122.0775");
                    expect(data.postal).toEqual("94043");
                    expect(data.timezone).toEqual("America/Los_Angeles");
                    expect(data.asn).toEqual({
                        asn: "AS15169",
                        name: "Google LLC",
                        domain: "google.com",
                        route: "8.8.8.0/24",
                        type: "hosting"
                    });
                    expect(data.company).toEqual({
                        name: "Google LLC",
                        domain: "google.com",
                        type: "hosting"
                    });
                    expect(data.privacy).toEqual({
                        vpn: false,
                        proxy: false,
                        tor: false,
                        relay: false,
                        hosting: true,
                        service: ""
                    });
                    expect(data.abuse).toEqual({
                        address: "US, CA, Mountain View, 1600 Amphitheatre Parkway, 94043",
                        country: "United States",
                        countryCode: "US",
                        email: "network-abuse@google.com",
                        name: "Abuse",
                        network: "8.8.8.0/24",
                        phone: "+1-650-253-0000"
                    });
                    expect(data.domains.ip).toEqual("8.8.8.8");
                    expect(data.domains.total).not.toBeFalsy();
                    expect(data.domains.domains.length).toEqual(5);
                    _a.label = 3;
                case 3:
                    i++;
                    return [3, 1];
                case 4:
                    done();
                    return [2];
            }
        });
    }); });
    test("lookupASN", function (done) { return __awaiter(void 0, void 0, void 0, function () {
        var i, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    i = 0;
                    _a.label = 1;
                case 1:
                    if (!(i < 5)) return [3, 4];
                    return [4, ipinfoWrapper.lookupASN("AS7922")];
                case 2:
                    data = _a.sent();
                    expect(data.asn).toEqual("AS7922");
                    expect(data.name).toEqual("Comcast Cable Communications, LLC");
                    expect(data.country).toEqual("United States");
                    expect(data.countryCode).toEqual("US");
                    expect(data.allocated).toEqual("1997-02-14");
                    expect(data.registry).toEqual("arin");
                    expect(data.domain).toEqual("comcast.com");
                    expect(data.num_ips).not.toBeFalsy();
                    expect(data.type).toEqual("isp");
                    _a.label = 3;
                case 3:
                    i++;
                    return [3, 1];
                case 4:
                    done();
                    return [2];
            }
        });
    }); });
    test("getMap", function (done) { return __awaiter(void 0, void 0, void 0, function () {
        var data;
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4, ipinfoWrapper.getMap(["8.8.8.8", "4.4.4.4"])];
                case 1:
                    data = _b.sent();
                    expect(data.status).toEqual("Report Generated");
                    expect((_a = data.reportUrl) === null || _a === void 0 ? void 0 : _a.includes("https://ipinfo.io/tools/map/")).toBeTruthy();
                    done();
                    return [2];
            }
        });
    }); });
    test("getBatch", function (done) { return __awaiter(void 0, void 0, void 0, function () {
        var i, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    i = 0;
                    _a.label = 1;
                case 1:
                    if (!(i < 5)) return [3, 4];
                    return [4, ipinfoWrapper.getBatch([
                            "8.8.8.8/hostname",
                            "4.4.4.4",
                            "AS123"
                        ])];
                case 2:
                    data = _a.sent();
                    expect("8.8.8.8/hostname" in data).not.toBeFalsy();
                    expect("4.4.4.4" in data).not.toBeFalsy();
                    expect("AS123" in data).not.toBeFalsy();
                    expect(data["8.8.8.8/hostname"]).toEqual("dns.google");
                    expect(data["4.4.4.4"]).toEqual({
                        ip: "4.4.4.4",
                        city: "Broomfield",
                        region: "Colorado",
                        country: "United States",
                        loc: "39.8854,-105.1139",
                        org: "AS3356 Level 3 Parent, LLC",
                        postal: "80021",
                        timezone: "America/Denver",
                        asn: {
                            asn: "AS3356",
                            name: "Level 3 Parent, LLC",
                            domain: "lumen.com",
                            route: "4.4.0.0/16",
                            type: "isp"
                        },
                        company: {
                            name: "Level 3 Communications, Inc.",
                            domain: "lumen.com",
                            type: "isp"
                        },
                        privacy: {
                            vpn: false,
                            proxy: false,
                            tor: false,
                            relay: false,
                            hosting: false,
                            service: ""
                        },
                        abuse: {
                            address: "US, CO, Broomfield, 1025 Eldorado Blvd., 80021",
                            country: "United States",
                            email: "abuse@level3.com",
                            name: "Abuse POC LVLT",
                            network: "4.4.0.0/16",
                            phone: "+1-877-453-8353",
                            countryCode: "US"
                        },
                        domains: {
                            ip: "4.4.4.4",
                            total: 125,
                            domains: [
                                "ncrsaas.com",
                                "edv-abteilung.de",
                                "itmanagementgroup.de",
                                "ciie.ru",
                                "ddosxtesting.co.uk"
                            ]
                        },
                        countryCode: "US"
                    });
                    expect(data["AS123"]).toEqual({
                        asn: "AS123",
                        name: "Air Force Systems Networking",
                        country: "United States",
                        countryCode: "US",
                        allocated: "1987-08-24",
                        registry: "arin",
                        domain: "af.mil",
                        num_ips: 0,
                        type: "inactive",
                        prefixes: [],
                        prefixes6: [],
                        peers: null,
                        upstreams: null,
                        downstreams: null
                    });
                    _a.label = 3;
                case 3:
                    i++;
                    return [3, 1];
                case 4:
                    done();
                    return [2];
            }
        });
    }); });
    test("isBogon", function (done) { return __awaiter(void 0, void 0, void 0, function () {
        var data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, ipinfoWrapper.lookupIp("198.51.100.1")];
                case 1:
                    data = _a.sent();
                    expect(data.ip).toEqual("198.51.100.1");
                    expect(data.bogon).toEqual(true);
                    done();
                    return [2];
            }
        });
    }); });
});
