"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var https_1 = __importDefault(require("https"));
var en_US_json_1 = __importDefault(require("../config/en_US.json"));
var eu_json_1 = __importDefault(require("../config/eu.json"));
var flags_json_1 = __importDefault(require("../config/flags.json"));
var currency_json_1 = __importDefault(require("../config/currency.json"));
var continent_json_1 = __importDefault(require("../config/continent.json"));
var lruCache_1 = __importDefault(require("./cache/lruCache"));
var apiLimitError_1 = __importDefault(require("./errors/apiLimitError"));
var isInSubnet = require("subnet-check").isInSubnet;
var common_1 = require("./common");
var version_1 = __importDefault(require("./version"));
var clientUserAgent = "IPinfoClient/nodejs/".concat(version_1.default);
var IPinfoWrapper = (function () {
    function IPinfoWrapper(token, cache, timeout) {
        this.mapLimitErrorMessage = "You have exceeded maximum IP upload limit per request.";
        this.token = token;
        this.countries = en_US_json_1.default;
        this.countriesFlags = flags_json_1.default;
        this.countriesCurrencies = currency_json_1.default;
        this.continets = continent_json_1.default;
        this.euCountries = eu_json_1.default;
        this.cache = cache ? cache : new lruCache_1.default();
        this.timeout =
            timeout === null || timeout === undefined
                ? common_1.REQUEST_TIMEOUT_DEFAULT
                : timeout;
    }
    IPinfoWrapper.cacheKey = function (k) {
        return "".concat(k, ":").concat(common_1.CACHE_VSN);
    };
    IPinfoWrapper.prototype.lookupIp = function (ip) {
        return __awaiter(this, void 0, void 0, function () {
            var ipinfo, data, config;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.isBogon(ip)) {
                            ipinfo = {};
                            ipinfo.bogon = true;
                            ipinfo.ip = ip;
                            return [2, ipinfo];
                        }
                        return [4, this.cache.get(IPinfoWrapper.cacheKey(ip))];
                    case 1:
                        data = _a.sent();
                        if (data) {
                            return [2, data];
                        }
                        config = {
                            headers: {
                                Accept: "application/json",
                                Authorization: "Bearer ".concat(this.token),
                                "Content-Type": "application/json",
                                "User-Agent": clientUserAgent
                            },
                            method: "GET",
                            host: common_1.HOST,
                            path: "/".concat(ip),
                            timeout: this.timeout
                        };
                        return [2, new Promise(function (resolve, reject) {
                                try {
                                    var req = https_1.default.request(config, function (res) {
                                        var data = "";
                                        res.on("data", function (chunk) {
                                            data += chunk;
                                        });
                                        if (!_this.is4xxOr5xx(res.statusCode)) {
                                            res.on("close", function () {
                                                var ipinfo = JSON.parse(data);
                                                if (ipinfo.country) {
                                                    ipinfo.countryCode = ipinfo.country;
                                                    ipinfo.country =
                                                        _this.countries[ipinfo.countryCode];
                                                    ipinfo.countryFlag =
                                                        _this.countriesFlags[ipinfo.countryCode];
                                                    ipinfo.countryCurrency =
                                                        _this.countriesCurrencies[ipinfo.countryCode];
                                                    ipinfo.continent =
                                                        _this.continets[ipinfo.countryCode];
                                                    ipinfo.isEU = _this.euCountries.includes(ipinfo.countryCode);
                                                }
                                                if (ipinfo.abuse && ipinfo.abuse.country) {
                                                    ipinfo.abuse.countryCode =
                                                        ipinfo.abuse.country;
                                                    ipinfo.abuse.country =
                                                        _this.countries[ipinfo.abuse.countryCode];
                                                }
                                                _this.cache.set(IPinfoWrapper.cacheKey(ip), ipinfo);
                                                resolve(ipinfo);
                                            });
                                            res.on("error", function (error) {
                                                reject(error);
                                            });
                                        }
                                        else {
                                            if (res.statusCode === 429) {
                                                reject(new apiLimitError_1.default());
                                            }
                                            else {
                                                res.on("close", function () {
                                                    reject(new Error(data));
                                                });
                                            }
                                        }
                                    });
                                    req.on("error", function (error) {
                                        reject(error);
                                    });
                                    req.end();
                                }
                                catch (error) {
                                    reject(error);
                                }
                            })];
                }
            });
        });
    };
    IPinfoWrapper.prototype.lookupASN = function (asn) {
        return __awaiter(this, void 0, void 0, function () {
            var data, config;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.cache.get(IPinfoWrapper.cacheKey(asn))];
                    case 1:
                        data = _a.sent();
                        if (data) {
                            return [2, data];
                        }
                        config = {
                            headers: {
                                Accept: "application/json",
                                Authorization: "Bearer ".concat(this.token),
                                "Content-Type": "application/json",
                                "User-Agent": clientUserAgent
                            },
                            method: "GET",
                            host: common_1.HOST,
                            path: "/".concat(asn, "/json"),
                            timeout: this.timeout
                        };
                        return [2, new Promise(function (resolve, reject) {
                                try {
                                    var req = https_1.default.request(config, function (res) {
                                        var data = "";
                                        res.on("data", function (chunk) {
                                            data += chunk;
                                        });
                                        if (!_this.is4xxOr5xx(res.statusCode)) {
                                            res.on("close", function () {
                                                var asnResp = JSON.parse(data);
                                                if (asnResp.country) {
                                                    asnResp.countryCode = asnResp.country;
                                                    asnResp.country =
                                                        _this.countries[asnResp.countryCode];
                                                }
                                                _this.cache.set(IPinfoWrapper.cacheKey(asn), asnResp);
                                                resolve(asnResp);
                                            });
                                            res.on("error", function (error) {
                                                reject(error);
                                            });
                                        }
                                        else {
                                            if (res.statusCode === 429) {
                                                reject(new apiLimitError_1.default());
                                            }
                                            else {
                                                res.on("close", function () {
                                                    reject(new Error(data));
                                                });
                                            }
                                        }
                                    });
                                    req.on("error", function (error) {
                                        reject(error);
                                    });
                                    req.end();
                                }
                                catch (error) {
                                    reject(error);
                                }
                            })];
                }
            });
        });
    };
    IPinfoWrapper.prototype.getMap = function (ips) {
        var _this = this;
        if (ips.length > 500000) {
            return new Promise(function (_resolve, reject) {
                reject(new Error(_this.mapLimitErrorMessage));
            });
        }
        var ipsData = JSON.stringify(ips);
        var config = {
            headers: {
                Accept: "application/json",
                Authorization: "Bearer ".concat(this.token),
                "Content-Type": "application/json",
                "Content-Length": ipsData.length,
                "User-Agent": clientUserAgent
            },
            method: "POST",
            host: common_1.HOST,
            path: "/tools/map?cli=1",
            timeout: this.timeout
        };
        return new Promise(function (resolve, reject) {
            try {
                var req = https_1.default.request(config, function (res) {
                    var data = "";
                    res.on("data", function (chunk) {
                        data += chunk;
                    });
                    if (!_this.is4xxOr5xx(res.statusCode)) {
                        res.on("close", function () {
                            resolve(JSON.parse(data));
                        });
                        res.on("error", function (error) {
                            reject(error);
                        });
                    }
                    else {
                        if (res.statusCode === 429) {
                            reject(new apiLimitError_1.default());
                        }
                        else {
                            res.on("close", function () {
                                reject(new Error(data));
                            });
                        }
                    }
                });
                req.on("error", function (error) {
                    reject(error);
                });
                req.write(ipsData);
                req.end();
            }
            catch (error) {
                reject(error);
            }
        });
    };
    IPinfoWrapper.prototype.__getBatch = function (ips, batchTimeout, filter) {
        var _this = this;
        var ipsData = JSON.stringify(ips);
        var config = {
            headers: {
                Accept: "application/json",
                Authorization: "Bearer ".concat(this.token),
                "Content-Type": "application/json",
                "Content-Length": ipsData.length,
                "User-Agent": clientUserAgent
            },
            method: "POST",
            host: common_1.HOST,
            path: "/batch".concat(filter ? "?filter=1" : ""),
            timeout: batchTimeout
        };
        return new Promise(function (resolve, reject) {
            try {
                var req = https_1.default.request(config, function (res) {
                    var data = "";
                    res.on("data", function (chunk) {
                        data += chunk;
                    });
                    if (!_this.is4xxOr5xx(res.statusCode)) {
                        res.on("close", function () {
                            resolve(data);
                        });
                        res.on("error", function (error) {
                            reject(error);
                        });
                    }
                    else {
                        if (res.statusCode === 429) {
                            reject(new apiLimitError_1.default());
                        }
                        else {
                            res.on("close", function () {
                                reject(new Error(data));
                            });
                        }
                    }
                });
                req.on("timeout", function () {
                    reject(new Error("batch timeout reached"));
                });
                req.on("error", function (error) {
                    reject(error);
                });
                req.write(ipsData);
                req.end();
            }
            catch (error) {
                reject(error);
            }
        });
    };
    IPinfoWrapper.prototype.getBatch = function (urls, batchSize, batchTimeout, timeoutTotal, filter) {
        if (batchSize === void 0) { batchSize = common_1.BATCH_MAX_SIZE; }
        if (batchTimeout === void 0) { batchTimeout = common_1.BATCH_REQ_TIMEOUT_DEFAULT; }
        if (timeoutTotal === void 0) { timeoutTotal = 0; }
        if (filter === void 0) { filter = false; }
        return __awaiter(this, void 0, void 0, function () {
            var result, lookupUrls, _i, urls_1, url, cachedUrl, promises, i, end, resDetails, batchPromise, totalTimeoutReached, totalTimeoutRef, timeoutPromise;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        result = {};
                        if (urls.length == 0) {
                            return [2, result];
                        }
                        if (batchSize <= 0 || batchSize > common_1.BATCH_MAX_SIZE) {
                            batchSize = common_1.BATCH_MAX_SIZE;
                        }
                        lookupUrls = [];
                        _i = 0, urls_1 = urls;
                        _a.label = 1;
                    case 1:
                        if (!(_i < urls_1.length)) return [3, 4];
                        url = urls_1[_i];
                        return [4, this.cache.get(IPinfoWrapper.cacheKey(url))];
                    case 2:
                        cachedUrl = _a.sent();
                        if (cachedUrl) {
                            result[url] = cachedUrl;
                        }
                        else {
                            lookupUrls.push(url);
                        }
                        _a.label = 3;
                    case 3:
                        _i++;
                        return [3, 1];
                    case 4:
                        if (lookupUrls.length == 0) {
                            return [2, result];
                        }
                        promises = [];
                        for (i = 0; i < lookupUrls.length; i += batchSize) {
                            end = i + batchSize;
                            if (end > lookupUrls.length) {
                                end = lookupUrls.length;
                            }
                            resDetails = this.__getBatch(lookupUrls.slice(i, end), batchTimeout, filter);
                            promises.push(resDetails);
                        }
                        batchPromise = Promise.all(promises).then(function (values) {
                            values.forEach(function (el) {
                                var batchResp = JSON.parse(el);
                                for (var key in batchResp) {
                                    if (batchResp.hasOwnProperty(key)) {
                                        var ipinfo = batchResp[key];
                                        if (ipinfo.country) {
                                            ipinfo.countryCode = ipinfo.country;
                                            ipinfo.country =
                                                _this.countries[ipinfo.countryCode];
                                        }
                                        if (ipinfo.abuse && ipinfo.abuse.country) {
                                            ipinfo.abuse.countryCode = ipinfo.abuse.country;
                                            ipinfo.abuse.country =
                                                _this.countries[ipinfo.abuse.countryCode];
                                        }
                                        if (!ipinfo.error) {
                                            _this.cache.set(IPinfoWrapper.cacheKey(key), ipinfo);
                                        }
                                        result[key] = batchResp[key];
                                    }
                                }
                            });
                        });
                        totalTimeoutReached = Symbol();
                        timeoutPromise = new Promise(function (resolve) {
                            if (timeoutTotal > 0) {
                                totalTimeoutRef = setTimeout(resolve, timeoutTotal, totalTimeoutReached);
                            }
                        });
                        return [4, Promise.race([batchPromise, timeoutPromise]).then(function (value) {
                                return new Promise(function (resolve, reject) {
                                    if (value === totalTimeoutReached) {
                                        reject(new Error("Total timeout has been exceeded."));
                                    }
                                    else {
                                        if (totalTimeoutRef) {
                                            clearTimeout(totalTimeoutRef);
                                        }
                                        resolve(result);
                                    }
                                });
                            })];
                    case 5: return [2, _a.sent()];
                }
            });
        });
    };
    IPinfoWrapper.prototype.is4xxOr5xx = function (statusCode) {
        return statusCode && statusCode >= 400 && statusCode < 600;
    };
    IPinfoWrapper.prototype.isBogon = function (ip) {
        for (var _i = 0, BOGON_NETWORKS_1 = common_1.BOGON_NETWORKS; _i < BOGON_NETWORKS_1.length; _i++) {
            var network = BOGON_NETWORKS_1[_i];
            if (isInSubnet(ip, network)) {
                return true;
            }
        }
        return false;
    };
    return IPinfoWrapper;
}());
exports.default = IPinfoWrapper;
